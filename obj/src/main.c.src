	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_rand_range
_rand_range:
	ld	hl, -3
	call	__frameset
	ld	hl, 0
	push	hl
	call	_time
	pop	bc
	push	de
	push	hl
	call	_srandom
	pop	hl
	pop	hl
	call	_random
	ld	(ix - 3), hl
	ld	hl, 1
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	bc, (ix + 9)
	add	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	iy
	ld	hl, (ix - 3)
	ld	a, iyl
	call	__lremu
	ld	de, (ix + 6)
	add	hl, de
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_frame
_draw_frame:
	ld	hl, -44
	call	__frameset
	ld	hl, 1
	lea	de, ix - 13
	ld	(ix - 32), de
	push	hl
	call	_gfx_SetDraw
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (_score)
	push	hl
	ld	hl, L_.str
	push	hl
	ld	hl, (ix - 32)
	push	hl
	call	___sprintf
	pop	hl
	pop	hl
	pop	hl
	call	_fontlib_ClearWindow
	call	_fontlib_GetWindowYMin
	ld	l, a
	push	hl
	ld	hl, 5
	push	hl
	call	_fontlib_SetCursorPosition
	pop	hl
	pop	hl
	ld	hl, (ix - 32)
	push	hl
	call	_fontlib_DrawString
	pop	hl
	ld	de, (_highscore)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB1_2
	ld	hl, L_.str.1
	lea	bc, ix - 29
	ld	(ix - 32), bc
	push	de
	push	hl
	push	bc
	call	___sprintf
	pop	hl
	pop	hl
	pop	hl
	call	_fontlib_Newline
	ld	hl, (ix - 32)
	push	hl
	call	_fontlib_DrawString
	pop	hl
BB1_2:
	ld	hl, _game
	ld	(ix - 32), hl
	ld	de, 40
	ld	bc, 0
BB1_3:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB1_12
	ld	(ix - 41), bc
	push	bc
	pop	hl
	ld	c, 3
	call	__ishl
	ld	(ix - 44), hl
	ld	iy, (ix - 32)
	ld	(ix - 35), iy
	or	a, a
	sbc	hl, hl
BB1_5:
	ld	(ix - 38), hl
	ld	bc, 240
	or	a, a
	sbc	hl, bc
	jq	z, BB1_6
	ld	hl, (ix - 35)
	ld	de, (hl)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	ld	a, 7
	ld	l, a
	jq	z, BB1_10
	ex	de, hl
	ld	de, 2
	or	a, a
	sbc	hl, de
	ld	hl, 6
	ex	de, hl
	ld	hl, (ix - 38)
	jq	nz, BB1_11
	ld	a, -64
	ld	l, a
BB1_10:
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 6
	push	hl
	ld	hl, 8
	push	hl
	ld	hl, (ix - 38)
	push	hl
	ld	hl, (ix - 44)
	push	hl
	call	_gfx_FillRectangle
	ld	de, 6
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 38)
BB1_11:
	add	hl, de
	ld	iy, (ix - 35)
	lea	iy, iy + 3
	ld	(ix - 35), iy
	ld	de, 40
	jq	BB1_5
BB1_6:
	ld	bc, (ix - 41)
	inc	bc
	ld	iy, (ix - 32)
	lea	iy, iy + 120
	ld	(ix - 32), iy
	jq	BB1_3
BB1_12:
	ld	hl, 1
	push	hl
	call	_gfx_Blit
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_generate_frame
_generate_frame:
	ld	hl, -3
	call	__frameset
	ld	iy, _game
	xor	a, a
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), hl
	ld	(_game), a
	lea	hl, iy
	inc	hl
	ld	bc, 4799
	ex	de, hl
	lea	hl, iy
	ldir
	ld	hl, (_apple_pos)
	ld	de, (_apple_pos+3)
	ld	bc, 120
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	bc, 3
	ex	de, hl
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 2
	ld	(iy), hl
	ld	bc, 9000
BB2_1:
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	jq	z, BB2_4
	ld	de, (ix - 3)
	ld	iy, _snake
	add	iy, de
	ld	hl, (iy)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_4
	ld	de, (ix - 3)
	ld	iy, _snake
	add	iy, de
	ld	hl, (iy + 3)
	ld	de, (iy + 6)
	ld	bc, 120
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _game
	add	iy, bc
	ex	de, hl
	ld	bc, 3
	call	__imulu
	ld	bc, 9000
	push	hl
	pop	de
	add	iy, de
	ld	hl, 1
	ld	(iy), hl
	ld	de, 9
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	jq	BB2_1
BB2_4:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_set_apple_pos
_set_apple_pos:
	ld	hl, 2
	ld	de, 38
	push	de
	push	hl
	call	_rand_range
	pop	de
	pop	de
	ld	(_apple_pos), hl
	ld	hl, 38
	push	hl
	ld	hl, 2
	push	hl
	call	_rand_range
	pop	de
	pop	de
	ld	(_apple_pos+3), hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_checkinput
_checkinput:
	call	_os_GetCSC
	ld	de, (_direction)
	cp	a, 4
	jq	nz, BB4_4
	ld	bc, 3
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB4_4
	ld	hl, 1
	jq	BB4_3
BB4_4:
	cp	a, 1
	jq	nz, BB4_7
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB4_7
	ld	hl, 3
	jq	BB4_3
BB4_7:
	cp	a, 2
	jq	nz, BB4_10
	ld	bc, 2
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB4_10
	or	a, a
	sbc	hl, hl
	jq	BB4_3
BB4_10:
	cp	a, 3
	jq	nz, BB4_13
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_13
	ld	hl, 2
BB4_3:
	ld	(_direction), hl
	ret
BB4_13:
	cp	a, 15
	jq	nz, BB4_15
	or	a, a
	sbc	hl, hl
	ld	(_game_looping), hl
BB4_15:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_increment_highscore
_increment_highscore:
	ld	hl, L_.str.2
	ld	de, L_.str.3
	ld	bc, (_score)
	ld	(_highscore), bc
	push	de
	push	hl
	call	_ti_Open
	ld	l, a
	pop	de
	pop	de
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, _highscore
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_load_highscore
_load_highscore:
	ld	hl, L_.str.2
	ld	de, L_.str.4
	push	de
	push	hl
	call	_ti_Open
	ld	l, a
	pop	de
	pop	de
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, _highscore
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_check_apple_hit
_check_apple_hit:
	ld	hl, -6
	call	__frameset
	ld	de, 0
	ld	hl, (_snake+3)
	ld	bc, (_apple_pos)
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB7_7
	ld	hl, (_snake+6)
	ld	bc, (_apple_pos+3)
	or	a, a
	sbc	hl, bc
	jq	nz, BB7_7
	ld	hl, (_snake_len)
	inc	hl
	ld	(_snake_len), hl
	ld	hl, (_score)
	push	hl
	pop	de
	inc	de
	ld	(_score), de
	ld	de, (_highscore)
	or	a, a
	sbc	hl, de
	call	__setflag
	call	p, _increment_highscore
	ld	iy, 9009
	ld	bc, 0
	push	bc
	pop	hl
BB7_3:
	ld	(ix - 3), hl
	ld	de, 9
	add	hl, de
	push	hl
	pop	de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jq	z, BB7_6
	ld	iy, _snake
	ld	bc, (ix - 3)
	add	iy, bc
	ld	hl, (iy)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	de
	pop	hl
	ld	iy, 9009
	jq	nz, BB7_3
	ld	iy, _snake
	add	iy, de
	ld	hl, 1
	ld	(iy - 9), hl
BB7_6:
	call	_set_apple_pos
	ld	hl, (_snake+3)
	ld	(ix - 3), hl
	ld	de, 0
BB7_7:
	ld	hl, (_snake+6)
	ld	(ix - 6), hl
	ld	bc, 8991
BB7_8:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB7_14
	push	de
	pop	bc
	ld	iy, _snake
	add	iy, bc
	ld	hl, (iy + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB7_14
	push	de
	pop	bc
	ld	iy, _snake
	add	iy, bc
	ld	bc, (iy + 12)
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	jq	nz, BB7_13
	push	de
	pop	bc
	ld	iy, _snake
	add	iy, bc
	ld	bc, (iy + 15)
	ld	hl, (ix - 6)
	or	a, a
	sbc	hl, bc
	jq	nz, BB7_13
	or	a, a
	sbc	hl, hl
	ld	(_game_looping), hl
BB7_13:
	ld	bc, 9
	ex	de, hl
	add	hl, bc
	ld	bc, 8991
	ex	de, hl
	jq	BB7_8
BB7_14:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_move_snake
_move_snake:
	ld	hl, -9018
	call	__frameset
	ld	bc, -9006
	lea	iy, ix
	add	iy, bc
	ld	hl, 1
	push	ix
	ld	bc, -9012
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	(iy), hl
	ld	iy, (_snake+3)
	ld	hl, (_snake+6)
	push	ix
	ld	bc, -9009
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	de, (_direction)
	push	de
	pop	hl
	ld	bc, 4
	or	a, a
	sbc	hl, bc
	jq	nc, BB8_1
	ld	hl, LJTI8_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB8_4:
	dec	iy
	jq	BB8_1
BB8_3:
	inc	iy
BB8_1:
	ld	bc, -9009
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
BB8_7:
	ld	bc, 0
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB8_9
	ld	iy, 40
BB8_9:
	ld	bc, 41
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	hl, 0
	jq	p, BB8_11
	lea	hl, iy
BB8_11:
	ld	bc, -9012
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 3), hl
	ld	bc, 40
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	ld	bc, 0
	jq	z, BB8_13
	push	de
	pop	bc
BB8_13:
	lea	hl, iy
	push	ix
	ld	de, -9009
	add	ix, de
	ld	(ix), hl
	pop	ix
	push	bc
	pop	hl
	ld	de, 0
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB8_15
	ld	bc, 39
BB8_15:
	ld	(iy + 6), bc
	ld	bc, -9009
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 9
	ld	bc, -9015
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, 8991
	ld	iy, 0
	lea	hl, iy
	ld	bc, _snake+3
BB8_16:
	ld	(ix - 3), bc
	push	ix
	ld	bc, -9012
	add	ix, bc
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jq	z, BB8_19
	ld	(ix - 3), bc
	ld	bc, -9012
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	add	iy, de
	ld	hl, (iy - 3)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_18
	ld	(ix - 3), bc
	ld	bc, -9012
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	ix
	ld	bc, -9015
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	add	iy, de
	push	ix
	ld	bc, -9018
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	(iy), hl
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	add	iy, de
	ld	hl, (iy)
	lea	de, iy
	ld	(ix - 3), bc
	ld	bc, -9018
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 3), hl
	push	de
	pop	iy
	ld	hl, (iy + 3)
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 6), hl
	ld	bc, -9012
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	de, 9
	add	hl, de
	ld	iy, 0
	ld	de, 8991
	ld	bc, (ix - 3)
	jq	BB8_16
BB8_18:
	ld	iy, 0
	jq	BB8_19
BB8_20:
	lea	bc, iy
	ld	de, -9012
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	ld	de, -9009
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	add	hl, bc
	push	hl
	pop	iy
	ld	de, (iy + 3)
	ld	iy, _snake
	add	iy, bc
	ld	(iy + 3), de
	lea	de, iy
	push	hl
	pop	iy
	ld	hl, (iy + 6)
	push	de
	pop	iy
	ld	(iy + 6), hl
	ld	bc, -9012
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, 9
	add	iy, de
BB8_19:
	ld	de, 9000
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jq	nz, BB8_20
	ld	sp, ix
	pop	ix
	ret
BB8_5:
	ld	bc, -9009
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	inc	de
	jq	BB8_7
BB8_6:
	ld	bc, -9009
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	dec	de
	jq	BB8_7
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI8_0:
	private	LJTI8_0
LJTI8_0:
	dl	BB8_4
	dl	BB8_6
	dl	BB8_3
	dl	BB8_5

	section	.text,"ax",@progbits
	public	_build_snake
_build_snake:
	ld	hl, -3
	call	__frameset
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), hl
	ld	de, (_snake_len)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB9_2
	ld	de, 0
BB9_2:
	ld	iy, _snake+3
	ld	bc, 20
BB9_3:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB9_4
	ld	hl, 1
	ld	(iy - 3), hl
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(iy), hl
	ld	(iy + 3), bc
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	dec	de
	lea	iy, iy + 9
	jq	BB9_3
BB9_4:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	call	_gfx_Begin
	ld	hl, (_test_font)
	ld	de, 0
	push	de
	push	hl
	call	_fontlib_SetFont
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	push	hl
	call	_fontlib_SetLineSpacing
	pop	hl
	pop	hl
	ld	hl, -16
	push	hl
	ld	hl, 320
	push	hl
	ld	hl, 5
	push	hl
	push	hl
	call	_fontlib_SetWindow
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	dec	hl
	push	hl
	call	_fontlib_SetColors
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_fontlib_SetTransparency
	pop	hl
	call	_load_highscore
	call	_build_snake
	call	_set_apple_pos
BB10_1:
	ld	hl, (_game_looping)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB10_3
	call	_checkinput
	call	_check_apple_hit
	call	_move_snake
	call	_generate_frame
	call	_draw_frame
	ld	hl, 30000
	push	hl
	call	_usleep
	pop	hl
	jq	BB10_1
BB10_3:
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ret
	section	.text,"ax",@progbits

	section	.data,"aw",@progbits
	public	_game_looping
_game_looping:
	dl	1

	section	.bss,"aw",@nobits
	public	_direction
_direction:
	rb	3

	section	.bss,"aw",@nobits
	public	_highscore
_highscore:
	rb	3

	section	.data,"aw",@progbits
	public	_snake_len
_snake_len:
	dl	15

	section	.bss,"aw",@nobits
	public	_score
_score:
	rb	3

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"score %d", 0

	section	.rodata,"a",@progbits
	private	L_.str.1
L_.str.1:
	db	"hi score %d", 0

	section	.bss,"aw",@nobits
	public	_game
_game:
	rb	4800

	section	.bss,"aw",@nobits
	public	_apple_pos
_apple_pos:
	rb	6

	section	.bss,"aw",@nobits
	public	_snake
_snake:
	rb	9000

	section	.rodata,"a",@progbits
	private	L_.str.2
L_.str.2:
	db	"snakeHS", 0

	section	.rodata,"a",@progbits
	private	L_.str.3
L_.str.3:
	db	"w", 0

	section	.rodata,"a",@progbits
	private	L_.str.4
L_.str.4:
	db	"r", 0

	ident	"clang version 14.0.0 (https://github.com/jacobly0/llvm-project a139def90d26173f771eb1eca797633d1fbb2797)"
	extern	_random
	extern	__Unwind_SjLj_Register
	extern	_fontlib_SetTransparency
	extern	__frameset
	extern	__lremu
	extern	_gfx_Begin
	extern	_usleep
	extern	_fontlib_DrawString
	extern	_ti_Write
	extern	_fontlib_SetColors
	extern	_fontlib_SetFont
	extern	_fontlib_ClearWindow
	extern	__ishl
	extern	_fontlib_SetWindow
	extern	_ti_Read
	extern	_test_font
	extern	_gfx_SetDraw
	extern	__setflag
	extern	_gfx_FillScreen
	extern	__Unwind_SjLj_Unregister
	extern	_gfx_Blit
	extern	_srandom
	extern	_gfx_FillRectangle
	extern	_fontlib_GetWindowYMin
	extern	_fontlib_SetLineSpacing
	extern	__imulu
	extern	_ti_Open
	extern	_gfx_SetColor
	extern	___sprintf
	extern	_fontlib_SetCursorPosition
	extern	_gfx_End
	extern	_os_GetCSC
	extern	_fontlib_Newline
	extern	_time
